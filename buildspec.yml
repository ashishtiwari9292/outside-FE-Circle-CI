version: 0.2
env:
  secrets-manager:
    LOGIN: SONAR_TOKEN:SONAR_TOKEN
phases:
  install:
    commands:
      - echo "Install phase ..."
    runtime-versions:
      nodejs: latest
  pre_build:
    commands:
      - mkdir sonar && cd sonar/
      - apt-get update
      - apt-get install --yes openjdk-11-jre
      - java -version
      - npm install --legacy-peer-deps
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
      - rm -rf sonar-scanner-cli-5.0.1.3006-linux.zip
      - export PATH=$PATH:sonar-scanner-5.0.1.3006-linux/bin/

  build:
    commands:
      - export NODE_OPTIONS=--openssl-legacy-provider
      - npm run build:dev
      - sonar-scanner -X -Dsonar.login=$LOGIN -Dsonar.organization=outsidefe -Dsonar.projectKey=outsidefe_outside9292 -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io
      - sleep 5
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=outsidefe_outside9292 > result.json
      - cat result.json
      - if [ $(jq -r '.projectStatus.status' result.json) = "ERROR" ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0; fi
      - if [ "$(jq -r '.errors[0].msg' result.json)" = "Either 'analysisId', 'projectId' or 'projectKey' must be provided" ]; then exit 1; fi
      - if [ "$(jq -r '.projectStatus.status' result.json)" = "ERROR" ]; then exit 1; fi
  post_build:
    commands:
      - aws s3 cp result.json s3://outside-s3-9292/sonar/result.json    
artifacts:
  name: "BuildOutput"
  files:
    - '**/*'
  base-directory: 'dist/outside-fe'
